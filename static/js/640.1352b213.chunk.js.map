{"version":3,"file":"static/js/640.1352b213.chunk.js","mappings":"kNAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,MAAnB,EACjBC,EAAe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,E,8BCDjC,EAAwB,sBAAxB,EAAsD,sB,SCGzCC,EAAS,WAElB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACI,mBAAOC,UAAWC,EAAlB,mCACI,kBAAOD,UAAWC,EACdC,KAAK,OACLC,SARK,SAAAC,GACb,IAAMC,EAAQD,EAAEE,OAAOD,MAAME,cAC7BT,GAASU,EAAAA,EAAAA,IAAaH,GACzB,MASJ,EClBD,EAAuB,0BAAvB,EAAyD,2BAAzD,EAA0F,yBCK7EI,EAAc,WACvB,IAAMlB,GAAWmB,EAAAA,EAAAA,IAAYrB,GACvBS,GAAWC,EAAAA,EAAAA,MA6BjB,OACI,kBAAMC,UAAWC,EAAYU,SA5BX,SAAAP,GAClBA,EAAEQ,iBACF,IAAMC,EAAOT,EAAEU,cACTC,EAAOF,EAAKG,SAASD,KAAKV,MAC1BY,EAASJ,EAAKG,SAASC,OAAOZ,MAC9Ba,EAAgBH,EAAKR,cACvBY,GAAY,EAEVC,EAAa,CACfL,KAAMA,EACNE,OAAQA,GAGZ1B,EAAS8B,SAAQ,SAAAC,GACTA,EAAQP,KAAKR,gBAAkBW,IAC/BK,MAAM,GAAD,OAAID,EAAQP,KAAZ,4BACLI,GAAY,EAEnB,IACGA,IAIJrB,GAAS0B,EAAAA,EAAAA,IAAWJ,IACpBP,EAAKY,QACR,EAGG,WACI,qCACA,kBACIzB,UAAWC,EACXC,KAAK,OACLa,KAAK,OACLW,QAAQ,yHACRC,MAAM,yIACNC,YAAY,aACZC,UAAQ,KAEZ,sCACA,kBACI7B,UAAWC,EACXC,KAAK,MACLa,KAAK,SACLW,QAAQ,yFACRC,MAAM,+FACNC,YAAY,eACZC,UAAQ,KAEZ,mBAAQ7B,UAAWC,EAAWC,KAAK,SAAnC,2BAKX,EC/DD,EAAuB,0BAAvB,EAA4D,8BAA5D,EAAgG,yBCenF4B,EAAc,WACvB,IAAMvC,GAAWmB,EAAAA,EAAAA,IAAYrB,GACvBK,GAASgB,EAAAA,EAAAA,IAAYjB,GACrBK,GAAWC,EAAAA,EAAAA,MACXgC,EAdiB,SAACxC,EAAUG,GAClC,OAAKA,EAGMH,EAASG,QAAO,SAAA4B,GACnB,OAAOA,EAAQP,KAAKR,cAAcyB,SAAStC,EAAOa,cACrD,IAJMhB,CAMd,CAM2B0C,CAAmB1C,EAAUG,GAKrD,OACI,0BACI,eAAIM,UAAWC,EAAf,SACK8B,EAAgBG,KAAI,SAACZ,EAASa,GAAV,OACb,gBAAInC,UAAWC,EAAf,WACI,yBAAIqB,EAAQP,KAAZ,KAAoBO,EAAQL,WACxB,mBAAQjB,UAAWC,EAAWC,KAAK,SAASkC,QAAS,kBAVrE,SAAAD,GACR,OAAOrC,GAASuC,EAAAA,EAAAA,IAAcF,GACjC,CAQsFG,CAAIhB,EAAQa,GAAlB,EAArD,sBAF4BA,EADvB,OAWpC,EC9Bc,SAASI,IACpB,IAAMzC,GAAWC,EAAAA,EAAAA,MACXH,GAAYc,EAAAA,EAAAA,IAAYf,GAM9B,OAJA6C,EAAAA,EAAAA,YAAU,WACN1C,GAAS2C,EAAAA,EAAAA,MACZ,GAAE,CAAC3C,KAGA,iCACI,SAAC4C,EAAA,EAAD,WACI,4CAEJ,SAACjC,EAAD,KACA,SAACZ,EAAD,KACA,gBAAKI,MAAO,CAAE0C,UAAW,GAAIC,WAAY,IAAzC,SACKhD,GAAa,2BAElB,SAACkC,EAAD,MAGX,C","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { handleFilter } from 'redux/contacts/contactsSlice';\nimport style from './Filter.module.css'\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n    const onChange = e => {\n        const value = e.target.value.toLowerCase();\n        dispatch(handleFilter(value));\n    };\n    return (\n        <label className={style.label}>Find contacts by name\n            <input className={style.input}\n                type='name'\n                onChange={onChange}\n            />\n        </label>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport style from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n    const addNewContact = e => {\n        e.preventDefault();\n        const form = e.currentTarget;  \n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        const nameLowerCase = name.toLowerCase();\n        let onTheList = false;\n\n        const newContact = {\n            name: name,\n            number: number,\n        };\n\n        contacts.forEach(contact => {\n            if (contact.name.toLowerCase() === nameLowerCase) {\n                alert(`${contact.name} is already on the list`);\n                onTheList = true;\n            };\n        });\n        if (onTheList) {\n            return;\n        };\n        \n        dispatch(addContact(newContact));\n        form.reset();\n    };\n\n    return (\n        <form className={style.form} onSubmit={addNewContact}>\n            <label>Name</label>\n            <input\n                className={style.input}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                placeholder='Enter name'\n                required\n            />\n            <label>Phone</label>\n            <input\n                className={style.input}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder='Enter number'\n                required\n            />\n            <button className={style.btn} type=\"submit\">\n                Add contact\n            </button>\n        </form>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"listItem\":\"ContactList_listItem__SptUx\",\"btn\":\"ContactList_btn__6Piat\",\"paragraph\":\"ContactList_paragraph__6LYsd\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport propTypes from 'prop-types';\nimport style from './ContactList.module.css'\n\nconst getVisibleContacts = (contacts, filter) => {\n    if (!filter) {\n        return contacts;\n    } else {\n        return contacts.filter(contact => {\n            return contact.name.toLowerCase().includes(filter.toLowerCase());\n        });\n    };\n};\n\nexport const ContactList = () => {\n    const contacts = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n    const visibleContacts = getVisibleContacts(contacts, filter);\n    const del = id => {\n        return dispatch(deleteContact(id));\n    };\n\n    return (\n        <div>\n            <ul className={style.list}>\n                {visibleContacts.map((contact, id) => (\n                        <li className={style.listItem} key={id}>\n                            <p>{contact.name}: {contact.number}</p>\n                                <button className={style.btn} type=\"button\" onClick={() => del(contact.id)}>\n                                    Delete\n                                </button>\n                        </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nContactList.propTypes = {\n    contacts: propTypes.arrayOf(\n        propTypes.shape({\n            id: propTypes.string.isRequired,\n            name: propTypes.string.isRequired,\n            number: propTypes.string.isRequired,\n        })\n    ),\n};","import { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { getIsLoading } from \"redux/contacts/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Phonebook</title>\n            </Helmet>\n            <ContactForm />\n            <Filter />\n            <div style={{ marginTop: 20, marginLeft: 20 }}>\n                {isLoading && 'Processing request...'}\n            </div>\n            <ContactList />\n        </>\n    );\n};"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","Filter","dispatch","useDispatch","className","style","type","onChange","e","value","target","toLowerCase","handleFilter","ContactForm","useSelector","onSubmit","preventDefault","form","currentTarget","name","elements","number","nameLowerCase","onTheList","newContact","forEach","contact","alert","addContact","reset","pattern","title","placeholder","required","ContactList","visibleContacts","includes","getVisibleContacts","map","id","onClick","deleteContact","del","Contacts","useEffect","fetchContacts","Helmet","marginTop","marginLeft"],"sourceRoot":""}