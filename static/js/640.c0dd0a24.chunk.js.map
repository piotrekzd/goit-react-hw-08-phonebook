{"version":3,"file":"static/js/640.c0dd0a24.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { handleFilter } from 'redux/contacts/contactsSlice';\nimport Form from 'react-bootstrap/Form';\nimport style from './Filter.module.css'\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n    const onChange = e => {\n        const value = e.target.value.toLowerCase();\n        dispatch(handleFilter(value));\n    };\n    return (\n        <Form className='mb-1' style={{ paddingTop: 20 }}>\n            <Form.Group>\n                <Form.Label>Find contacts by name</Form.Label>\n                <Form.Control\n                    className={style.input}\n                    type='name'\n                    onChange={onChange}\n                />\n            </Form.Group>\n        </Form>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\",\"input\":\"ContactForm_input__Bl93P\",\"paragraph\":\"ContactForm_paragraph__nRyTj\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport style from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n    const addNewContact = e => {\n        e.preventDefault();\n        const form = e.currentTarget;  \n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        const nameLowerCase = name.toLowerCase();\n        let onTheList = false;\n\n        const newContact = {\n            name: name,\n            number: number,\n        };\n\n        contacts.forEach(contact => {\n            if (contact.name.toLowerCase() === nameLowerCase) {\n                alert(`${contact.name} is already on the list`);\n                onTheList = true;\n            };\n        });\n        if (onTheList) {\n            return;\n        };\n        \n        dispatch(addContact(newContact));\n        form.reset();\n    };\n\n    return (\n        <Form className=\"no-border\" onSubmit={addNewContact}>\n            <p className={style.paragraph}>Add a new contact</p>\n            <Form.Group className='mb-3' controlId='inputName'>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n                className={style.input}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                placeholder='Enter name'\n                required\n            />\n            </Form.Group>\n            <Form.Group className='mb-3' controlId='inputPhone'>\n            <Form.Label>Phone</Form.Label>\n            <Form.Control\n                className={style.input}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder='Enter number'\n                required\n                />\n                </Form.Group>\n            <Button variant='secondary' type=\"submit\">\n                Add contact\n            </Button>\n        </Form>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"listItem\":\"ContactList_listItem__SptUx\",\"btn\":\"ContactList_btn__6Piat\",\"paragraph\":\"ContactList_paragraph__6LYsd\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport propTypes from 'prop-types';\nimport style from './ContactList.module.css'\n\nconst getVisibleContacts = (contacts, filter) => {\n    if (!filter) {\n        return contacts;\n    } else {\n        return contacts.filter(contact => {\n            return contact.name.toLowerCase().includes(filter.toLowerCase());\n        });\n    };\n};\n\nexport const ContactList = () => {\n    const contacts = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n    const visibleContacts = getVisibleContacts(contacts, filter);\n    const del = id => {\n        return dispatch(deleteContact(id));\n    };\n\n    return (\n        <div>\n            <ul className={style.list}>\n                {visibleContacts.map((contact, id) => (\n                        <li className={style.listItem} key={id}>\n                            <p>{contact.name}: {contact.number}</p>\n                                <button className={style.btn} type=\"button\" onClick={() => del(contact.id)}>\n                                    Delete\n                                </button>\n                        </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nContactList.propTypes = {\n    contacts: propTypes.arrayOf(\n        propTypes.shape({\n            id: propTypes.string.isRequired,\n            name: propTypes.string.isRequired,\n            number: propTypes.string.isRequired,\n        })\n    ),\n};","import { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { getIsLoading } from \"redux/contacts/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Helmet } from \"react-helmet\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(getIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Helmet>\n                <title>Phonebook</title>\n            </Helmet>\n            <ContactForm />\n            <Filter />\n            <div style={{ marginTop: 20, marginLeft: 20 }}>\n                {isLoading && 'Processing request...'}\n            </div>\n            <ContactList />\n        </>\n    );\n};"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","Filter","dispatch","useDispatch","Form","className","style","paddingTop","type","onChange","e","value","target","toLowerCase","handleFilter","ContactForm","useSelector","onSubmit","preventDefault","form","currentTarget","name","elements","number","nameLowerCase","onTheList","newContact","forEach","contact","alert","addContact","reset","controlId","pattern","title","placeholder","required","Button","variant","ContactList","visibleContacts","includes","getVisibleContacts","map","id","onClick","deleteContact","del","Contacts","useEffect","fetchContacts","Helmet","marginTop","marginLeft"],"sourceRoot":""}